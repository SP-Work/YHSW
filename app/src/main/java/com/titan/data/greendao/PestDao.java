package com.titan.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.titan.model.Pest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PEST".
*/
public class PestDao extends AbstractDao<Pest, Long> {

    public static final String TABLENAME = "PEST";

    /**
     * Properties of entity Pest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Cname = new Property(1, String.class, "cname", false, "CNAME");
        public final static Property Lname = new Property(2, String.class, "lname", false, "LNAME");
        public final static Property Ename = new Property(3, String.class, "ename", false, "ENAME");
        public final static Property Alias = new Property(4, String.class, "alias", false, "ALIAS");
        public final static Property Kindom = new Property(5, String.class, "kindom", false, "KINGDOM");
        public final static Property Phylum = new Property(6, String.class, "phylum", false, "PHYLUM");
        public final static Property Tclass = new Property(7, String.class, "tclass", false, "CLASS");
        public final static Property Orider = new Property(8, String.class, "orider", false, "TORDER");
        public final static Property Family = new Property(9, String.class, "family", false, "Family");
        public final static Property Genus = new Property(10, String.class, "genus", false, "GENUS");
        public final static Property Species = new Property(11, String.class, "species", false, "SPECIES");
        public final static Property Distribution = new Property(12, String.class, "distribution", false, "Distribution");
        public final static Property Feature = new Property(13, String.class, "feature", false, "FEATURE");
        public final static Property Type = new Property(14, String.class, "type", false, "TYPE");
        public final static Property Control = new Property(15, String.class, "control", false, "CONTROL");
        public final static Property Host = new Property(16, String.class, "host", false, "HOST");
        public final static Property Address = new Property(17, String.class, "address", false, "ADDRESS");
        public final static Property Whbw = new Property(18, String.class, "whbw", false, "WHBW");
    }


    public PestDao(DaoConfig config) {
        super(config);
    }
    
    public PestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PEST\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CNAME\" TEXT," + // 1: cname
                "\"LNAME\" TEXT," + // 2: lname
                "\"ENAME\" TEXT," + // 3: ename
                "\"ALIAS\" TEXT," + // 4: alias
                "\"KINGDOM\" TEXT," + // 5: kindom
                "\"PHYLUM\" TEXT," + // 6: phylum
                "\"CLASS\" TEXT," + // 7: tclass
                "\"TORDER\" TEXT," + // 8: orider
                "\"Family\" TEXT," + // 9: family
                "\"GENUS\" TEXT," + // 10: genus
                "\"SPECIES\" TEXT," + // 11: species
                "\"Distribution\" TEXT," + // 12: distribution
                "\"FEATURE\" TEXT," + // 13: feature
                "\"TYPE\" TEXT," + // 14: type
                "\"CONTROL\" TEXT," + // 15: control
                "\"HOST\" TEXT," + // 16: host
                "\"ADDRESS\" TEXT," + // 17: address
                "\"WHBW\" TEXT);"); // 18: whbw
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PEST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Pest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(2, cname);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(3, lname);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(4, ename);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(5, alias);
        }
 
        String kindom = entity.getKindom();
        if (kindom != null) {
            stmt.bindString(6, kindom);
        }
 
        String phylum = entity.getPhylum();
        if (phylum != null) {
            stmt.bindString(7, phylum);
        }
 
        String tclass = entity.getTclass();
        if (tclass != null) {
            stmt.bindString(8, tclass);
        }
 
        String orider = entity.getOrider();
        if (orider != null) {
            stmt.bindString(9, orider);
        }
 
        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(10, family);
        }
 
        String genus = entity.getGenus();
        if (genus != null) {
            stmt.bindString(11, genus);
        }
 
        String species = entity.getSpecies();
        if (species != null) {
            stmt.bindString(12, species);
        }
 
        String distribution = entity.getDistribution();
        if (distribution != null) {
            stmt.bindString(13, distribution);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(14, feature);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(15, type);
        }
 
        String control = entity.getControl();
        if (control != null) {
            stmt.bindString(16, control);
        }
 
        String host = entity.getHost();
        if (host != null) {
            stmt.bindString(17, host);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(18, address);
        }
 
        String whbw = entity.getWhbw();
        if (whbw != null) {
            stmt.bindString(19, whbw);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Pest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(2, cname);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(3, lname);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(4, ename);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(5, alias);
        }
 
        String kindom = entity.getKindom();
        if (kindom != null) {
            stmt.bindString(6, kindom);
        }
 
        String phylum = entity.getPhylum();
        if (phylum != null) {
            stmt.bindString(7, phylum);
        }
 
        String tclass = entity.getTclass();
        if (tclass != null) {
            stmt.bindString(8, tclass);
        }
 
        String orider = entity.getOrider();
        if (orider != null) {
            stmt.bindString(9, orider);
        }
 
        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(10, family);
        }
 
        String genus = entity.getGenus();
        if (genus != null) {
            stmt.bindString(11, genus);
        }
 
        String species = entity.getSpecies();
        if (species != null) {
            stmt.bindString(12, species);
        }
 
        String distribution = entity.getDistribution();
        if (distribution != null) {
            stmt.bindString(13, distribution);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(14, feature);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(15, type);
        }
 
        String control = entity.getControl();
        if (control != null) {
            stmt.bindString(16, control);
        }
 
        String host = entity.getHost();
        if (host != null) {
            stmt.bindString(17, host);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(18, address);
        }
 
        String whbw = entity.getWhbw();
        if (whbw != null) {
            stmt.bindString(19, whbw);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Pest readEntity(Cursor cursor, int offset) {
        Pest entity = new Pest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ename
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // alias
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // kindom
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phylum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tclass
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // orider
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // family
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // genus
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // species
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // distribution
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // feature
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // type
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // control
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // host
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // address
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // whbw
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Pest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlias(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKindom(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhylum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTclass(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrider(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFamily(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGenus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSpecies(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDistribution(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFeature(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setControl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHost(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAddress(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setWhbw(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Pest entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Pest entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Pest entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
